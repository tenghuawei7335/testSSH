#Spring jdbcTemplate
#MySQL数据库驱动
jdbc.driver=com.mysql.cj.jdbc.Driver
#连接数据库的URL
jdbc.url=jdbc:mysql://127.0.0.1:3306/databaseone?useSSL=false&characterEncoding=utf-8&serverTimezone=UTC&allowPublicKeyRetrieval=true
#连接数据库的用户名
jdbc.username=root
#连接数据库的用密码
jdbc.password=thw217335
#=======================================END=====================================================

#DBCP
dbcp.driver=com.mysql.cj.jdbc.Driver
dbcp.url=jdbc:mysql://127.0.0.1:3306/databaseone?useSSL=false&characterEncoding=utf-8&serverTimezone=UTC&allowPublicKeyRetrieval=true
dbcp.username=root
dbcp.password=thw217335
#初始化连接
dbcp.initialSize=5
#最大空闲连接
dbcp.maxIdle=10
#最小空闲连接
dbcp.minIdle=5
#最大同时连接数量
dbcp.maxTotal=15
#是否自动回收超时连接
dbcp.removeAbandoned=true
#超时时间(以秒数为单位)
dbcp.removeAbandonedTimeout=120
#超时等待时间以毫秒为单位
dbcp.maxWaitMillis=60000
#验证链接是否有效的Mysql语句
dbcp.validationQuery=select 1
#获取连接之前是否测试连接的可用性
dbcp.testOnBorrow=true
#归还连接时检测连接是否有效
dbcp.testOnReturn=true
#大于空闲连接默认时间,检测是否还有效
dbcp.testWhileIdle=true
#设置在自动回收超时连接的时候打印连接的超时错误
dbcp.logAbandoned=true
#=======================================END=====================================================

#C3P0--空闲连接是指：连接池一个数据源连接上后，不用放在那的无操作的时间！
c3p0.driver=com.mysql.cj.jdbc.Driver
c3p0.url=jdbc:mysql://127.0.0.1:3306/databaseone?useSSL=false&characterEncoding=utf-8&serverTimezone=UTC&allowPublicKeyRetrieval=true
c3p0.username=root
c3p0.password=thw217335
#连接池中保留的最大连接数。Default: 15
c3p0.maxPoolSize=50
#连接池中保留的最小连接数
c3p0.minPoolSize=5
#初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3
c3p0.initialPoolSize=10
#连接的最大空闲时间，连接后，如果空闲超过这个时间，某个数据库连接还没有被使用，则会断开掉这个连接。若为0则永不丢弃。Default: 0
c3p0.maxIdleTime=1800
#当连接池中的连接耗尽的时候，c3p0一次新建的连接数。Default: 3
c3p0.acquireIncrement=5
#连接池为数据源单个Connection缓存的PreparedStatement数，这个配置比maxStatements更有意义，
# 因为它缓存的服务对象是单个数据连接，
#如果设置的好，肯定是可以提高性能的。为0的时候不缓存。default : 0（看情况而论）
c3p0.maxStatementsPerConnection=30
#每180秒()检查所有连接池中的空闲连接。Default: 0
c3p0.idleConnectionTestPeriod=180
#连接池在获得新连接失败时重试的次数，如果小于等于0则无限重试直至连接获得成功。default : 30（建议使用）
c3p0.acquireRetryAttempts=30
#acquireRetryDelay:连接失败。不断重新连接的，两次连接中间隔时间，单位毫秒，连接池在获得新连接时的间隔时间。default : 1000 单位ms（建议使用）
c3p0.acquireRetryDelay=1000
#如果为true，则当连接获取失败时自动关闭数据源，除非重新启动应用程序。所以一般不用。default : false
c3p0.breakAfterAcquireFailure=false
#连接池在回收数据库连接时是否自动提交事务。如果为false，则会回滚未提交的事务，如果为true，则会自动提交事务。default : false
c3p0.autoCommitOnClose=false
#如果设为true那么在每个connection提交的时候都将校验其有效性.Default: false
c3p0.testConnectionOnCheckout=false
#c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过多线程实现多个操作同时被执行。Default: 3
c3p0.numHelperThreads=10
#当连接池所有连接用完时,应用程序getConnection的等待时间。为0则无限等待，直至有其他连接释放或者创建新的连接，
#其实就是acquireRetryAttempts*acquireRetryDelay（理想情况下）,除非你每次连接都休息很久再操作！
#不为0则当时间到的时候如果仍没有获得连接，则会抛出SQLException
c3p0.checkoutTimeout=300

#=======================================END=====================================================

#druid.
druid.driverClassName=com.mysql.cj.jdbc.Driver
druid.url=jdbc:mysql://127.0.0.1:3306/databaseone?useSSL=false&characterEncoding=utf-8&serverTimezone=UTC&allowPublicKeyRetrieval=true
druid.username=root
druid.password=thw217335
#初始化连接池中连接数
druid.initialSize=5
#最小连接池数量
druid.minIdle=5
#最大连接池数量
druid.maxActive=50
#获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，
#如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
druid.maxWait=60000
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
druid.timeBetweenEvictionRunsMillis=1800000
#配置一个连接在池中最小生存的时间，单位是毫秒
druid.minEvictableIdleTimeMillis=1800000
#验证连接有效与否的SQL，不同的数据配置不同
druid.validationQuery=select 1
#建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，
#如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效
druid.testWhileIdle=false
#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
druid.testOnBorrow=true
#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
druid.testOnReturn=false
#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
druid.poolPreparedStatements=true
#要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
#在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100,默认值-1。
druid.maxPoolPreparedStatementPerConnectionSize=20
#置提交方式，默认就是TRUE
druid.defaultAutoCommit=true
#属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有:
#监控统计用的filter:stat,日志用的filter:log4j,防御sql注入的filter:wall。
druid.filters=stat
druid.keepAlive=true








